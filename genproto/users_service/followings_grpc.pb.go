// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: followings.proto

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FollowingService_Follow_FullMethodName            = "/users_service.FollowingService/Follow"
	FollowingService_UnFollow_FullMethodName          = "/users_service.FollowingService/UnFollow"
	FollowingService_GetListFollowings_FullMethodName = "/users_service.FollowingService/GetListFollowings"
	FollowingService_GetListFollowers_FullMethodName  = "/users_service.FollowingService/GetListFollowers"
)

// FollowingServiceClient is the client API for FollowingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for User
type FollowingServiceClient interface {
	Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error)
	UnFollow(ctx context.Context, in *UnFollowRequest, opts ...grpc.CallOption) (*UnFollowResponse, error)
	GetListFollowings(ctx context.Context, in *GetListFollowingRequest, opts ...grpc.CallOption) (*FollowingList, error)
	GetListFollowers(ctx context.Context, in *GetListFollowerRequest, opts ...grpc.CallOption) (*FollowerList, error)
}

type followingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowingServiceClient(cc grpc.ClientConnInterface) FollowingServiceClient {
	return &followingServiceClient{cc}
}

func (c *followingServiceClient) Follow(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowResponse)
	err := c.cc.Invoke(ctx, FollowingService_Follow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) UnFollow(ctx context.Context, in *UnFollowRequest, opts ...grpc.CallOption) (*UnFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnFollowResponse)
	err := c.cc.Invoke(ctx, FollowingService_UnFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) GetListFollowings(ctx context.Context, in *GetListFollowingRequest, opts ...grpc.CallOption) (*FollowingList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowingList)
	err := c.cc.Invoke(ctx, FollowingService_GetListFollowings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followingServiceClient) GetListFollowers(ctx context.Context, in *GetListFollowerRequest, opts ...grpc.CallOption) (*FollowerList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FollowerList)
	err := c.cc.Invoke(ctx, FollowingService_GetListFollowers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowingServiceServer is the server API for FollowingService service.
// All implementations must embed UnimplementedFollowingServiceServer
// for forward compatibility.
//
// Service definition for User
type FollowingServiceServer interface {
	Follow(context.Context, *FollowRequest) (*FollowResponse, error)
	UnFollow(context.Context, *UnFollowRequest) (*UnFollowResponse, error)
	GetListFollowings(context.Context, *GetListFollowingRequest) (*FollowingList, error)
	GetListFollowers(context.Context, *GetListFollowerRequest) (*FollowerList, error)
	mustEmbedUnimplementedFollowingServiceServer()
}

// UnimplementedFollowingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFollowingServiceServer struct{}

func (UnimplementedFollowingServiceServer) Follow(context.Context, *FollowRequest) (*FollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Follow not implemented")
}
func (UnimplementedFollowingServiceServer) UnFollow(context.Context, *UnFollowRequest) (*UnFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnFollow not implemented")
}
func (UnimplementedFollowingServiceServer) GetListFollowings(context.Context, *GetListFollowingRequest) (*FollowingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFollowings not implemented")
}
func (UnimplementedFollowingServiceServer) GetListFollowers(context.Context, *GetListFollowerRequest) (*FollowerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListFollowers not implemented")
}
func (UnimplementedFollowingServiceServer) mustEmbedUnimplementedFollowingServiceServer() {}
func (UnimplementedFollowingServiceServer) testEmbeddedByValue()                          {}

// UnsafeFollowingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowingServiceServer will
// result in compilation errors.
type UnsafeFollowingServiceServer interface {
	mustEmbedUnimplementedFollowingServiceServer()
}

func RegisterFollowingServiceServer(s grpc.ServiceRegistrar, srv FollowingServiceServer) {
	// If the following call pancis, it indicates UnimplementedFollowingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FollowingService_ServiceDesc, srv)
}

func _FollowingService_Follow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).Follow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowingService_Follow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).Follow(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_UnFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).UnFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowingService_UnFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).UnFollow(ctx, req.(*UnFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_GetListFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFollowingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetListFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowingService_GetListFollowings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetListFollowings(ctx, req.(*GetListFollowingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FollowingService_GetListFollowers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowingServiceServer).GetListFollowers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowingService_GetListFollowers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowingServiceServer).GetListFollowers(ctx, req.(*GetListFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowingService_ServiceDesc is the grpc.ServiceDesc for FollowingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users_service.FollowingService",
	HandlerType: (*FollowingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Follow",
			Handler:    _FollowingService_Follow_Handler,
		},
		{
			MethodName: "UnFollow",
			Handler:    _FollowingService_UnFollow_Handler,
		},
		{
			MethodName: "GetListFollowings",
			Handler:    _FollowingService_GetListFollowings_Handler,
		},
		{
			MethodName: "GetListFollowers",
			Handler:    _FollowingService_GetListFollowers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "followings.proto",
}
